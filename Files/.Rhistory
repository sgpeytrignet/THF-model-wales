a=log(20)
b=log(20)
alpha=b-a
exp(alpha)*exp(a)-exp(a)
a=log(20)
b=log(18)
alpha=b-a
exp(alpha)*exp(a)-exp(a)
a=log(100)
b=log(105)
alpha=b-a
exp(2*alpha)*exp(a)-exp(a)
exp(alpha)*exp(a)-exp(a)
m12-bl
m24-bl
(m12-bl)*2
(m12-bl)*2
m24-bl
m12-bl
exp(2*alpha)*exp(a)-exp(a)
a=log(100)
b=log(105)
c=log(110.25)
c
alpha
c-b
exp(alpha)*exp(a)-exp(a)
exp(alpha)*exp(b)-exp(b)
exp(alpha)*exp(a)-exp(a)
a=log(100)
b=log(101)
exp(alpha)*exp(a)-exp(a)
alpha=b-a
exp(alpha)*exp(a)-exp(a)
a=log(100)
b=log(105)
c=log(110.25)
alpha=b-a
alpha2=c-b
exp(alpha)*exp(a)-exp(a)
exp(alpha)*exp(b)-exp(b)
exp(alpha)*exp(a)-exp(a)
exp(2*alpha)*exp(a)-exp(a)
exp(alpha)*exp(a)-exp(a)
exp(alpha)*exp(b)-exp(b)
exp(alpha)*exp(b)-exp(b)
exp(2*alpha)*exp(a)-exp(a)
exp(alpha)*exp(a)-exp(a)
exp(alpha)*exp(a)-exp(a)
exp(alpha)*exp(b)-exp(b)
exp(2*alpha)*exp(a)-exp(a)
a=log(100)
b=log(105)
c=log(110.25)
a
b
c
alpha=b-a
alpha
exp(alpha)*exp(a)-exp(a)
exp(alpha)*exp(b)-exp(b)
exp(alpha)
(m12-bl)*2
m24-bl
(m12-bl)*2
m12-bl
a=log(100)
b=log(105)
c=log(110.25)
alpha=b-a
alpha
exp(alpha)*exp(a)-exp(a)
exp(b)-exp(a)
exp(alpha)*exp(b)-exp(b)
exp(c)-exp(b)
a=log(100)
b=log(105)
c=log(110.25)
a=log(100)
b=log(105)
c=log(110.25)
plot(c(0,12,24),c(a,b,c))
plot(c(0,12,24),c(a,b,c),type="l")
alpha=b-a
exp(alpha)*exp(a)-exp(a)
exp(b)-exp(a)
exp(alpha)
exp(alpha)*exp(a)-exp(a)
exp(b)-exp(a)
exp(alpha)*exp(b)-exp(b)
exp(c)-exp(b)
exp(b)
exp(alpha)*exp(b)-exp(b)
exp(c)-exp(b)
alpha=b-a
exp(alpha)*exp(a)-exp(a)
exp(alpha)*exp(a)-exp(a)
129.7/9376.72
(9376.72-129.7)/9376.72
31*2479
31*2934
1.4460362^0.5
2.120457^0.5
1-0.64
1-0.64
help(df)
1-pf(2.954112846309356,3,125)
1-pf(2.954112846309356,3,126)
1-pf(2.954112846309356,3,120)
1-pf(2.954112846309356,3,128)
1-pf(3.59126292358791,3,128)
1-pf(3.59126292358791,3,128)
1-pf(2.954112846309356,3,128)
1-pf(2.954112846309356,3,126)
1-pf(2.954112846309356,3,130)
1-pf(2.954112846309356,3,128)
a=log(100)
b=log(105)
alpha=b-a
exp(alpha)*exp(a)-exp(a)
exp(b)-exp(a)
a=log(100)
b=log(95)
alpha=b-a
alpha
exp(alpha)*exp(a)-exp(a)
95/100
exp(alpha)
a=log(100)
b=log(112)
alpha=b-a
exp(alpha)*exp(a)-exp(a)
(12-6)^3
a=log(100)
b=log(95)
alpha=b-a
alpha2=c-b
a=log(100)
b=log(95)
alpha=b-a
exp(alpha)*exp(a)-exp(a)
a=log(1)
b=log(4)
exp(alpha)*exp(a)-exp(a)
a=log(1)
b=log(4)
alpha=b-a
exp(alpha)*exp(a)-exp(a)
a=log(0)
b=log(4)
alpha=b-a
alpha
a=log(0.5)
b=log(4.5)
alpha=b-a
alpha
exp(alpha)*exp(a)-exp(a)
a=log(0.1)
b=log(2.1)
alpha=b-a
exp(b)-exp(a)
exp(alpha)*exp(a)-exp(a)
a=log(0.1)
b=log(2.1)
alpha=b-a
exp(alpha)*exp(a)-exp(a)
exp(b)-exp(a)
a=log(0.1)
b=log(2.1)
c=log(110.25)
plot(c(0,12,24),c(a,b,c),type="l")
a
b
c
24*b/12
exp(24*b/12)
c=log(4.41)
plot(c(0,12,24),c(a,b,c),type="l")
b+alpha
exp(b+alpha)
c=log(44.1)
plot(c(0,12,24),c(a,b,c),type="l")
alpha=b-a
alpha2=c-b
exp(alpha)*exp(a)-exp(a)
exp(alpha)*exp(b)-exp(b)
exp(2*alpha)*exp(a)-exp(a)
exp(alpha)*exp(a)-exp(a)
library(data.table)
load("/Users/sgpeytrignet/Downloads/Relevant_USoc_roadlinks.RData")
mylist <- list(LSOA_links_out[[1]],LSOA_links_out[[2]],LSOA_links_out[[3]])
mylist
dt<-rbindlist(mylist)
dt
dt<-rbindlist(LSOA_links_out)
dt <- as.data.frame(dt)
dt[1:100,]
write.csv(dt, file = "/Users/sgpeytrignet/Downloads/LSOA_links_out.csv")
0.8/0.2
0.9/0.1
0.1/0.9
library(dplyr)
library(data.table)
library(geojsonio)
library(rgdal)
library(sf)
library(ggplot2)
library(ggmap)
library(broom)
library(RColorBrewer)
library(leaflet)
library(RANN)
library(raster)
library(maptools)
library(rgdal)
library(readxl)
rm(list = ls())
install.packages("RANN")
install.packages("readxl")
#Load packages
library(Hmisc)
library(pastecs)
library(sae)
library(plyr)
library(dplyr)
library(bit64)
library(tibble)
library(data.table)
library(survey)
library(sp)
library(raster)
library(rgdal)
library(leaflet)
library(RColorBrewer)
rm(list = ls())
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
setwd("F:/Scottish Household Survey 2/")
ECCT_dzs <- as.data.table(fread("C:/Users/S?bastien/Dropbox (Simetrica)/Simetrica Team Folder/Projects/Edinburgh City Centre/Data/Lookups/ECCT-datazones.csv", header = T, sep = ',', data.table = T))
ECCT_dzs <- as.data.table(fread("/Users/sgpeytrignet/Dropbox (Simetrica)/Simetrica Team Folder/Projects/Edinburgh City Centre/Data/Lookups/ECCT-datazones.csv", header = T, sep = ',', data.table = T))
ECCT_dzs
pop_by_dz <- as_tibble(fread("/Users/sgpeytrignet/Dropbox (Simetrica)/Simetrica Team Folder/Projects/Edinburgh City Centre/Data/Population estimates/dz2011-pop-est-wide.csv", header = T, sep = ',', data.table = T))
pop_by_dz
pop_by_mmw <- pop_by_dz[,list(adults2017_MMW=sum(adults16_17,na.rm=T)
), by=list(MMWcode)]
pop_by_dz
pop_by_dz <- as.data.table(left_join(pop_by_dz,ECCT_dzs,by=c("dz2011"="DataZone")))
pop_by_mmw <- pop_by_dz[,list(adults2017_MMW=sum(adults16_17,na.rm=T)
), by=list(MMWcode)]
pop_by_mmw
pop_by_mmw <- pop_by_dz[,list(adults2017_MMW=sum(adults16_17,na.rm=T),
pop17_MMW=sum(pop17,na.rm=T)
), by=list(MMWcode)]
pop_by_mmw
write.csv(buffer1km_HEd, file = "/Users/sgpeytrignet/Dropbox (Simetrica)/Simetrica Team Folder/Projects/Edinburgh City Centre/Data/Population estimates/By ward/pop17-by-mmw.csv")
write.csv(pop_by_mmw, file = "/Users/sgpeytrignet/Dropbox (Simetrica)/Simetrica Team Folder/Projects/Edinburgh City Centre/Data/Population estimates/By ward/pop17-by-mmw.csv")
library(rgdal)
library(maptools)
library(rgeos)
library(raster)
library(leaflet)
library(RColorBrewer)
library(sp)
library(dplyr)
library(data.table)
library(tidyverse)
library(sf)
install.packages("tidyverse")
library(dplyr)
library(data.table)
library(geojsonio)
library(rgdal)
library(sf)
library(ggplot2)
library(ggmap)
library(broom)
library(RColorBrewer)
library(leaflet)
library(RANN)
library(raster)
library(maptools)
library(rgdal)
library(readxl)
rm(list = ls())
library(rgdal)
library(maptools)
library(rgeos)
library(raster)
library(leaflet)
library(RColorBrewer)
library(sp)
library(dplyr)
library(data.table)
library(tidyverse)
library(sf)
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
36*1.03
36*1.04
36*1.05
(38-36)/36*100
(38-36)/36*100
36*1.05
36000*1.05
0.7*35000
x <- c(1:10)
y <- x
x
y
y[1] <- 99
x
y
7*96/4
(99-96)/3
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr,stringr,sp,ggplot2,plyr,readxl,gmodels,Rmisc,DescTools,data.table,
Hmisc,tibble,rgdal,leaflet,rgeos,raster,summarytools,plotly,pbapply)
rm(list = ls()) ##### Clean up the global environment
install.packages(c("data.table", "dplyr", "geosphere", "pacman", "rgeos"))
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr,stringr,sp,ggplot2,plyr,readxl,gmodels,Rmisc,DescTools,data.table,
Hmisc,tibble,rgdal,leaflet,rgeos,raster,summarytools,plotly,pbapply)
rm(list = ls()) ##### Clean up the global environment
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr,stringr,sp,ggplot2,plyr,readxl,gmodels,Rmisc,DescTools,data.table,
Hmisc,tibble,rgdal,leaflet,rgeos,raster,plotly,pbapply,pbmcapply,
ContourFunctions,ROCR,pROC,margins)
rm(list = ls()) ##### Clean up the global environment
################## Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr,stringr,sp,ggplot2,plyr,gmodels,Rmisc,DescTools,data.table,Hmisc,tibble,rgdal,leaflet,rgeos,raster,plotly,pbapply,pbmcapply,skimr,ROCR,pROC,margins,jtools)
################## Clean up the global environment
rm(list = ls())
################## Set directory
setwd(str_replace_all(path.expand("~"), "Documents", ""))
setwd("Documents/GitHub/THF-model-wales/Files/")
################## Function to produce 'distance to GP surgery' predictor based on place of residence
number.within.buffer <- function(k,distpar_km,adminpoints.spdf,interestpoints.spdf){
aux.refpoint <- adminpoints.spdf[k,] #Isolate the admin-area-center
#Store its coordinates
long.point <- spTransform(aux.refpoint, CRS(latlong))@coords[1,1]
lat.point <- spTransform(aux.refpoint, CRS(latlong))@coords[1,2]
a <- c(long.point,lat.point)
#Create a buffer around the amdin-area-center
aux.refpoint.buffer <- rgeos::gBuffer(aux.refpoint,width=distpar_km*1000,byid=TRUE)
# plot(aux.refpoint.buffer)
# points(aux.refpoint,col="red")
# points(healthcare_resources_shp,col="blue")
#Extract the candidate items in that buffer
aux.overlay <- over(interestpoints.spdf,aux.refpoint.buffer)
candidates.spdf <- interestpoints.spdf[which(!is.na(aux.overlay[,1])),]
N_aux <- nrow(candidates.spdf@data) #How many did we find?
if (N_aux>=1) {
#Extract the info about the candidate items
candidates.data <- candidates.spdf@data
#This matrix will store the information about distances
cand.mat <- as.data.frame(matrix(NA, nrow = N_aux, ncol = 6))
names(cand.mat)=c("pcode","country","buffer.km","N.in.buffer","dist.to.point","name")
#Compute distances to admin-area-centre in a loop
for (s in 1:N_aux){
#Coordinates of candidate point
long.item <- spTransform(candidates.spdf, CRS(latlong))@coords[s,1]
lat.item <- spTransform(candidates.spdf, CRS(latlong))@coords[s,2]
b <- c(long.item,lat.item)
#Compute distance
distKm <- geosphere::distCosine(a, b, r=6378137)/1000
#distMin=(gmapsdistance(origin=m,destination=n,mode="walking")$Time)/60
#Populate the results matrix
cand.mat[s,1]=as.character(aux.refpoint@data$pcode)
cand.mat[s,2]=as.character(aux.refpoint@data$ctry)
cand.mat[s,3]=distpar_km
cand.mat[s,4]=N_aux
cand.mat[s,5]=distKm
cand.mat[s,6]=as.character(candidates.spdf@data$Name[s])
}
#Extract the nearest one, which will be the final output
idx.nearest <- which(cand.mat[,5]==min(cand.mat[,5]))[1]
end.mat <- cand.mat[idx.nearest,]
}
else {
#This matrix will store the results - which are always 0 if there were no candidates
end.mat <- as.data.frame(matrix(NA, nrow = N_aux, ncol = 6))
names(end.mat)=c("pcode","country","buffer.km","N.in.buffer","dist.to.point","name")
end.mat[1,1]=as.character(aux.refpoint@data$pcode)
end.mat[1,2]=as.character(aux.refpoint@data$ctry)
end.mat[1,3]=distpar_km
end.mat[1,4]=N_aux
end.mat[1,5]=NA
end.mat[1,6]=NA
}
return(end.mat)}
################## Projection codes
ukgrid = "+init=epsg:27700"
latlong="+init=epsg:4326"
###################################################
################### SURVEY DATA ###################
###################################################
################## Import dataset (*)
USoc <- fread("Understanding-Society-Wave8.csv", header=TRUE, sep=",", check.names=T) %>%
filter(.,gor_dv=="[10] wales") %>% as_tibble()
skim(USoc)
round(mean(USoc$inpatient_nexttyear)*100,1)
################## The median age of those who needed hospital care was 6 years higher (*)
mu_age <- ddply(USoc, "inpatient_nexttyear", summarise, age.median=median(age))
USoc %>% ggplot(., aes(x=age, fill=factor(inpatient_nexttyear), color=factor(inpatient_nexttyear))) +
geom_density(alpha=0.5) + theme(panel.background = element_blank(),legend.position="bottom") + ggtitle("Distribution of age") +
geom_vline(data=mu_age, aes(xintercept=age.median, color=factor(inpatient_nexttyear)),
linetype="dashed") + scale_colour_brewer(type="qual",labels = c("No", "Yes"),palette=4) + scale_fill_brewer(type="qual",labels = c("No", "Yes"),palette=4) + labs(fill = "Inpatient care next 12m",col="Inpatient care next 12m")
rm(mu_age)
##################  Those with a pre-existing long-term health condition were twice as likely (*)
##################  to need hospital care
USoc %>% ddply(., "LT_health", summarise, rate.inpatient=mean(inpatient_nexttyear)*100) %>% round(.,1) %>%
ggplot(., aes(x=factor(LT_health), y=rate.inpatient, fill=factor(LT_health))) +
geom_bar(stat="identity") + geom_text(aes(label=rate.inpatient, y = rate.inpatient + 1), position=position_dodge(width=0.9)) +
scale_fill_brewer(type="qual",labels = c("No", "Yes"),palette=1) + labs(fill = "Long-term health condition") + xlab("Long-term health condition") + ylab("%") + ggtitle("% requiring inpatient care next 12m") +
theme(panel.background = element_blank(),legend.position="bottom")
##################  There is, at first sight, no relationship between living in an urban area (*)
##################  and needing hospital care
USoc %>% ddply(., "urban", summarise, rate.inpatient=mean(inpatient_nexttyear)*100) %>% round(.,1) %>%
ggplot(., aes(x=factor(urban), y=rate.inpatient, fill=factor(urban))) +
geom_bar(stat="identity") + geom_text(aes(label=rate.inpatient, y = rate.inpatient + 1), position=position_dodge(width=0.9)) +
scale_fill_brewer(type="qual",labels = c("No", "Yes"),palette=2) + labs(fill = "Living in urban area") + xlab("Living in urban area") + ylab("%") + ggtitle("% requiring inpatient care next 12m") +
theme(panel.background = element_blank(),legend.position="bottom")
################## Import directory of Welsh postcodes
Wales_postcodes_small <- fread("Welsh postcodes small.csv",header=TRUE, sep=",", check.names=T)
Wales_postcodes_small
################## Randomly select postcodes to merge into the survey data
################## Separately for urban and rural respondents
USoc_urban <- filter(USoc,urban==1) %>% select(.,pidp)
urban_postcodes <- filter(Wales_postcodes_small,urban==1)
samples_postcodes_urban_idx <- sample(1:nrow(urban_postcodes),nrow(USoc_urban), replace = TRUE, prob = NULL)
USoc_imputed_pcode_urban <- urban_postcodes[samples_postcodes_urban_idx,] %>% select(.,pcode) %>% cbind.data.frame(.,USoc_urban)
USoc_rural <- filter(USoc,urban==0) %>% select(.,pidp)
rural_postcodes <- filter(Wales_postcodes_small,urban==0)
samples_postcodes_rural_idx <- sample(1:nrow(rural_postcodes),nrow(USoc_rural), replace = TRUE, prob = NULL)
USoc_imputed_pcode_rural <- urban_postcodes[samples_postcodes_rural_idx,] %>% select(.,pcode) %>% cbind.data.frame(.,USoc_rural)
imputed_postcodes <- rbind(USoc_imputed_pcode_urban,USoc_imputed_pcode_rural) %>% as.data.table()
################## Merge imputed postcodes back into dataset
USoc <- left_join(USoc,imputed_postcodes,by="pidp")
rm(urban_postcodes,samples_postcodes_urban_idx,USoc_imputed_pcode_urban,rural_postcodes,samples_postcodes_rural_idx,USoc_imputed_pcode_rural,USoc_rural,USoc_urban,imputed_postcodes)
################## Visualize (imputed) locations of survey respondents (*)
Survey_postcodes_shp <- SpatialPointsDataFrame(cbind(Wales_postcodes_small$long,Wales_postcodes_small$lat),
data = Wales_postcodes_small,
proj4string = CRS(latlong)) %>% subset(., pcode %in% USoc$pcode)
leaflet(Survey_postcodes_shp) %>% addProviderTiles(providers$Stamen.Terrain) %>% addCircleMarkers(data=Survey_postcodes_shp,fillColor = "blue",radius=5, fillOpacity = 0.5,stroke=T,col="#737373",weight = 1)
################## Import GP surgery locations (NHS Digital)
gp_surgeries <- fread("epraccur-clean.csv", header = T, sep = ',', data.table = T)
gp_surgeries_shp <- SpatialPointsDataFrame(cbind(gp_surgeries$long,gp_surgeries$lat),
data = gp_surgeries[,1:2],
proj4string = CRS(latlong))
################## Import hospital locations (Open Street Maps)
OSM_points_shp <- readOGR("hospitals.geojson", "hospitals", require_geomType="wkbPoint") #Import shapefile
OSM_points_shp <- spTransform(OSM_points_shp, CRS(latlong)) #Set to the same projection
OSM_points_shp@data <- select(OSM_points_shp@data,name,amenity) %>%
rename(.,Name=name,Type=amenity)
################## Visualize web-scraped geodata (*)
################## Note areas in the middle with much lower provison (relative to population density)
healthcare_resources_shp <- raster::bind(OSM_points_shp,gp_surgeries_shp)
rm(OSM_points_shp,gp_surgeries_shp,gp_surgeries,Wales_postcodes_small) #Clean up environment
palher <- colorFactor(palette=c("#e7298a","#e6ab02"), levels = c("GP","hospital"))
leaflet(healthcare_resources_shp) %>%
addProviderTiles(providers$Stamen.Terrain) %>%
addCircleMarkers(data=healthcare_resources_shp,fillColor = ~palher(Type),radius=5,
fillOpacity = 0.5,stroke=T,col="#737373",weight = 1) %>% addLegend("bottomright", col=c("#e7298a","#e6ab02"), title = 'Amenity', labels=c("GP","hospital"),opacity = 1) # legend title
##################  Test the user-written function for first 5 postcodes among survey responses (*)
loop.support.one <- 1:5
Survey_postcodes_shp <- spTransform(Survey_postcodes_shp, CRS(ukgrid))
healthcare_resources_shp <- spTransform(healthcare_resources_shp, CRS(ukgrid))
survey.predictors.wales <- pbmclapply(loop.support.one,number.within.buffer,
distpar_km=20,adminpoints.spdf=Survey_postcodes_shp,
interestpoints.spdf=healthcare_resources_shp) %>% data.table::rbindlist(.)
survey.predictors.wales
survey.predictors.wales <- fread("Welsh postcodes small 20km.csv",header=TRUE, sep=",", check.names=T)
################## but about 5% of postcodes are more than 6km away from a GP surgery
round(median(survey.predictors.wales$dist.to.point*1000),1)
ggplot(survey.predictors.wales, aes(dist.to.point, fill = cut(dist.to.point, 100))) +
geom_histogram(show.legend = FALSE) + theme_minimal() + labs(x = "Km to nearest GP/hospital", y = "n") +
ggtitle("Histogram") + scale_fill_discrete(h = c(240, 10), c = 120, l = 70)
USoc <- left_join(USoc,survey.predictors.wales,by="pcode")
Model_1 <-  glm(inpatient_nexttyear ~ age+male+leq_hhincome,data=USoc, family=binomial)
jtools::plot_summs(Model_1, scale = TRUE)
cplot(Model_1, "age")
Model_2 <-  glm(inpatient_nexttyear ~ age+male+leq_hhincome+LT_health,data=USoc, family=binomial)
jtools::plot_summs(Model_2, scale = TRUE)
jtools::plot_summs(Model_2, scale = TRUE)
Model_2 <-  glm(inpatient_nexttyear ~ age+male+leq_hhincome+LT_health,data=USoc, family=binomial)
jtools::plot_summs(Model_2, scale = TRUE)
jtools::plot_summs(Model_1, scale = TRUE)
jtools::plot_summs(Model_2, scale = TRUE)
new_data <- rbind(USoc %>% select(.,age,male,leq_hhincome) %>% apply(.,2,mean) %>% t() %>% as.data.frame() %>% cbind(LT_health=1,.),
USoc %>% select(.,age,male,leq_hhincome) %>% apply(.,2,mean) %>% t() %>% as.data.frame() %>% cbind(LT_health=0,.))
predicted_data <- predict(Model_2, newdata = new_data, type="response")
vis_model2 <- cbind.data.frame(LT_health=new_data$LT_health,mean.likelihood=predicted_data*100) %>% round(.,1) %>%
ggplot(., aes(x=factor(LT_health), y=mean.likelihood,
fill=factor(LT_health))) + geom_bar(stat="identity") + geom_text(aes(label=mean.likelihood), position=position_dodge(width=1)) + scale_fill_brewer(type="qual",labels = c("No", "Yes"),palette=4) +
labs(fill = "Previous health condition") + xlab("Previous health condition") + ylab("%") + theme_minimal() + ggtitle("Predicted likelihood of needing hospital care")
vis_model2
################## Living in an urban area is not associated with more hospital stays (*)
Model_3 <-  glm(inpatient_nexttyear ~ age+male+leq_hhincome+LT_health+urban,data=USoc, family=binomial)
jtools::plot_summs(Model_3, scale = TRUE)
################## Actually - neither is living further away from a GP or hospital (*)
Model_4 <-  glm(inpatient_nexttyear ~ age+male+leq_hhincome+LT_health+dist.to.point,data=USoc, family=binomial)
jtools::plot_summs(Model_4, scale = TRUE)
################## This model has poor predictive performance (AUC of 0.6)
################## Only slightly better than random prediction
predict_model4 <- predict(Model_4, type="response")
AUC <- pROC::roc(Model_4$data$inpatient_nexttyear,predict_model4)
AUC
################## Also reflected in the ROC curve
ROCRpred_model4 <-  ROCR::prediction(predict_model4, Model_4$data$inpatient_nexttyear)
ROCRperf_model4 <- performance(ROCRpred_model4, "tpr", "fpr")
plot(ROCRperf_model4, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
